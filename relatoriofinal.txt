Universidade de Brasília
Internet do Futuro - 2/2017 - Profa. Jeísa
Projeto Final

Gustavo Henrique Fernandes Carvalho - 14/0021671
Victor Araújo Vieira - 14/0032801


Artigo utilizado para o projeto: GENI-enabled Programming Experiments for Networking Classes


O relatório é dividido em 4 tópicos:
	
	1. Resumo da proposta do artigo;
	2. Escopo do projeto, parâmetros definidos pelo artigo e por nós, e dificuldades encontradas;
	3. Resultados;
	4. Passo a passo da implementação do projeto.

-------------------------------------------------------------------------------------

1. Resumo da proposta do artigo
	
	O foco do artigo é mostrar como a ferramenta GENI pode ser utilizada em disciplinas que envolvem redes 
	de computadores, para isso os autores comentam sobre suas experiências com a ferramenta nessas 
	disciplinas por meio de dois projetos que foram propostos usando o GENI.

	O primeiro projeto é implementar um algoritmo de controle de trajetória com roteamento baseado em QoS,
	o projeto pode ser dividido em duas etapas.

	A primeira etapa é implementar uma rede onde o roteamento e o encaminhamento funcionam de maneira
	independente.

	A segunda etapa é implementar um serviço de roteamento que coleta informações de QoS dos roteadores e
	então repassa essa informação coletada para o algoritmo de decisão de roteamento de cada roteador, que
	então atualiza sua tabela de roteamento com base nos dados de QoS.

	O segundo projeto proposto pelo artigo é implementar o protocolo de roteamento Distance
	Vector, utilizando UDP e o ambiente de testes do GENI para testar o protocolo.
	Consiste em 5 etapas:
	    1. Configuração do experimento ProtoGENI;
	    2. Implementação do protocolo de roteamento Distance Vector;
	    3. Mudança do custo dos links entre os nós de forma dinâmica;
	    4. Modificação da tabela de encaminhamento;
	    5. Geração de dados para a observação dos efeitos do roteamento.

	Foi constatado pelos autores que após a aplicação dos projetos descritos como trabalhos
	de disciplina, a maioria das ferramentas do GENI eram fáceis para os alunos entenderem, de forma que
	usavam de maneira rápida e efetiva.

-------------------------------------------------------------------------------------

2. Escopo do projeto, parâmetros definidos pelo artigo e por nós, e dificuldades encontradas

	Como os dois projetos que foram propostos pelos autores foram passados em matérias com o período de 4
	semanas para a entrega, e por algumas dificuldades presentes nos projetos, decidimos implementar 
	apenas as duas primeiras etapas do segundo projeto.

	Escolhemos esse projeto e suas duas primeiras etapas, porque além de podermos trabalhar as nossas
	habilidades no GENI, vamos implementar um dos protocolos mais famosos da camada de redes e ver na 
	prática como funcionam. Além de que as duas primeiras etapas podem ser feitas no curto espaço de tempo 
	que temos.

	No projeto definido no artigo, é utilizado o ProtoGeni para gerar atualizações nos custos dos
	links e observar o tráfego da rede, porém não conseguimos configurá-lo para nosso projeto e decidimos
	inserir manualmente os custos dos links nos arquivos de configuração de cada nó.

	O artigo também propõem a implementação utilizando C++ ou Java mas devido a familiaridade dos
	integrantes com a socket API em Python decidimos fazer nossa implementação em Python.
	
	Essas serão as únicas alterações em relação ao que foi proposto no artigo, implementaremos os dois
	primeiros passos do Distance Vector Routing Protocol em Python e com os custos inseridos manualmente.

-------------------------------------------------------------------------------------

3. Resultados

	Para ser possível visualizar a evolução das tabelas de roteamento fizemos uma função que escreve a tabela em um
	arquivo de log (routing_table_log.txt) sempre que ocorre qualquer alteração na tabela. No nosso teste iniciamos o
	Script em cada um dos nós de A a F em ordem alfabética, o resultado da evolução da tabela de 
	roteamento de cada nó está na pasta Resultados.

	Um detalhe interessante do algoritmo Distance Vector é que ao iniciarmos o Script em um novo nó pode ocorrer mais
	uma alteração na tabela de roteamento dos outros nós, isso se deve ao fato de estarmos usando o protocolo UDP e
	por isso a ordem das mensagens é aleatória e também de cada nó possuir seu próprio timeout de reenvio de mensagem
	caso tenha ocorrido a perda de algum pacote.
	
	Um exemplo desse comportamento pode ser visto no log da tabela de roteamento do nó A, como podemos observar as duas
	últimas tabelas de roteamento possuem os mesmos nós sendo a única diferença o custo para o nó F, isso ocorreu porque
	ao iniciar o Script no nó E ele informou tanto o nó C e D que existe um caminho para o nó F passando por ele e como as
	mensagens não possuem ordem o nó A foi informado primeiro do caminho passando pelo nó C (A-B-C-E-F) com custo de 25 e
	logo após foi informado que existe um caminho para F passando pelo nó D (A-B-D-E-F) com custo de 20, como o custo é menor
	então ele é substituído na tabela de roteamento.


-------------------------------------------------------------------------------------

4. Passo a passo da implementação do projeto

	Para a implementação do projeto, foram seguidos os seguintes passos:
		1. Criamos a slice no GENI;

		2. Alocamos os recursos necessários para o projeto, sendo eles 6 máquinas virtuais
		da University of Texas InstaGENI, e às conectamos de forma a representar a topologia
		ilustrada na figura ./topologiausada.jpg;

		3. Implementamos o código Python que executaria o protocolo de roteamento distance vector, 
		de acordo com o que foi especificado nas seções anteriores;

		4. Em cada máquina virtual da topologia configurada, fizemos os procedimentos necessários para 
		que o nosso código funcionasse, esses procedimentos foram:
			4.1. Criar os arquivos de configuração especificados no artigo;
			4.2. Baixar o código fonte Python em cada máquina, sendo que para isso, usamos
			o comando wget {link_codigo_github};
			4.3. Baixar os arquivos de configuração correspondentes a cada máquina, usando o 
			comando wget {link_arquivos_github}.

		5. Com tudo devidamente configurado, executamos o código e obtivemos os resultados esperados.

	No final, conseguimos cumprir com o escopo especificado de forma satisfatória. 

-------------------------------------------------------------------------------------